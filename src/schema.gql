# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  """
  JWT access token
  """
  accessToken: String!

  """
  JWT refresh token
  """
  refreshToken: String!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumStatusFieldUpdateOperationsInput {
  set: Status
}

input EnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  refreshToken(token: String!): AccessToken!
  signIn(input: SignInInput!): AccessToken!
  signUp(input: SignUpInput!): AccessToken!
  userCreate(input: UserCreateInput!): User!
  userDelete(where: UserWhereUniqueInput!): User!
  userUpdate(input: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  users(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  name: String
  password: String!
}

enum SortOrder {
  asc
  desc
}

enum Status {
  ACTIVE
  INACTIVE
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  detail: UserDetail
  email: String!
  emailConfirmed: Boolean!
  id: ID!
  role: Role!
  status: Status!
  twoFactorEnabled: Boolean!
  updatedAt: DateTime!
}

input UserCreateInput {
  createdAt: DateTime
  detail: UserDetailCreateNestedOneWithoutUserInput
  email: EmailAddress!
  emailConfirmed: Boolean
  id: String
  password: String!
  role: Role
  status: Status
  twoFactorEnabled: Boolean
  updatedAt: DateTime
}

type UserDetail {
  avatarUrl: String
  bio: String
  createdAt: DateTime!
  dateOfBirth: DateTime
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input UserDetailCreateNestedOneWithoutUserInput {
  connect: UserDetailWhereUniqueInput
  connectOrCreate: UserDetailCreateOrConnectWithoutUserInput
  create: UserDetailCreateWithoutUserInput
}

input UserDetailCreateOrConnectWithoutUserInput {
  create: UserDetailCreateWithoutUserInput!
  where: UserDetailWhereUniqueInput!
}

input UserDetailCreateWithoutUserInput {
  avatarUrl: String
  bio: String
  createdAt: DateTime
  dateOfBirth: DateTime
  firstName: String!
  lastName: String!
  updatedAt: DateTime
}

input UserDetailOrderByWithRelationInput {
  avatarUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  dateOfBirth: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserDetailUpdateOneWithoutUserInput {
  connect: UserDetailWhereUniqueInput
  connectOrCreate: UserDetailCreateOrConnectWithoutUserInput
  create: UserDetailCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: UserDetailUpdateWithoutUserInput
  upsert: UserDetailUpsertWithoutUserInput
}

input UserDetailUpdateWithoutUserInput {
  avatarUrl: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfBirth: NullableDateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserDetailUpsertWithoutUserInput {
  create: UserDetailCreateWithoutUserInput!
  update: UserDetailUpdateWithoutUserInput!
}

input UserDetailWhereInput {
  AND: [UserDetailWhereInput!]
  NOT: [UserDetailWhereInput!]
  OR: [UserDetailWhereInput!]
  avatarUrl: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  dateOfBirth: DateTimeNullableFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input UserDetailWhereUniqueInput {
  id: Int
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  detail: UserDetailOrderByWithRelationInput
  email: SortOrder
  emailConfirmed: SortOrder
  id: SortOrder
  password: SortOrder
  role: SortOrder
  status: SortOrder
  twoFactorEnabled: SortOrder
  updatedAt: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailConfirmed
  id
  password
  role
  status
  twoFactorEnabled
  updatedAt
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  detail: UserDetailUpdateOneWithoutUserInput
  email: StringFieldUpdateOperationsInput
  emailConfirmed: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  twoFactorEnabled: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  detail: UserDetailWhereInput
  email: StringFilter
  emailConfirmed: BoolFilter
  id: StringFilter
  password: StringFilter
  role: EnumRoleFilter
  status: EnumStatusFilter
  twoFactorEnabled: BoolFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: EmailAddress
  id: String
}
